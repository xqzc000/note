### 背景：测试线程和协程哪个执行效率比较高。以及各自的使用场景。


### 总结：
1.当涉及算法运算，大量的cpu执行命令时，（cpu密集型）需要用线程。同样的算法代码，线程跑完只要8ms,协程需要166ms，最多的依此有466ms。
2.如果运算少，代码执行量少，io密集型（大量文件操作等），建议使用协程。

错误的比较：（单一任务）
```
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking

var time: Long=0
val mRunnable = Runnable {

    run {
        Main.maopao(Main.array)
        println(System.currentTimeMillis()-time)
    }
}

fun test(){   //线程
    time=System.currentTimeMillis()
    Thread(mRunnable).start()
}

fun test1(){
    time=System.currentTimeMillis()
    runBlocking {   //协程
        launch {
            Main.maopao(Main.array)
            println(System.currentTimeMillis()-time)
        }
    }
}

fun main() {
    test()
//    test1()

}
```
```
import java.util.Random;

public class Main {
    public static final int[]array={121,38,767,393,983,49,929,402,12,900,564,893,3,57,530,895,629,639,680,286,64,311,591,661,69,807,930,344,188,908,192,479,918,424,392,824,903,723,420,237,686,133,324,116,186,505,247,565,474,758,872,102,841,783,587,579,901,714,643,561,459,878,297,769,224,509,707,970,670,929,470,471,457,203,993,880,477,862,513,812,334,970,530,851,675,581,745,650,424,420,123,
            488,791,295,136,429,195,42,210,275,272,367,540,84,914,273,993,218,296,300,531,422,445,720,788,169,587,133,308,558,916,168,183,848,94,963,258,231,890,746,202,286,250,601,521,80,892,660,15,569,752,175,217,809,58,220,784,531,884,298,624,596,467,250,619,638,739,845,74,268,394,218,199,416,975,124,170,696,725,415,830,896,999,83,967,320,282,929,131,726,705,306,98,399,105,799,539,918,410,
            883,900,647,287,93,77,213,922,602,266,967,287,543,996,658,507,836,843,480,872,107,201,678,288,824,893,619,572,571,315,652,768,120,861,676,924,440,784,969,25,896,734,114,302,527,867,276,47,790,934,740,689,616,118,574,292,376,694,844,149,969,167,843,527,504,0,176,702,831,188,415,200,611,137,819,519,180,920,914,15,925,150,288,881,137,166,660,794,782,920,87,395,710,682,536,469,591,314,
            221,145,820,197,53,785,765,431,32,790,874,791,223,239,501,422,592,435,60,365,554,988,166,944,479,88,77,602,999,325,609,582,905,848,574,847,693,497,948,685,476,303,684,44,353,876,298,683,241,220,317,462,293,672,820,57,353,25,579,481,772,611,443,8,344,248,895,533,100,13,994,926,516,437,494,939,858,328,488,80,702,928,935,871,25,24,340,311,695,570,491,509,603,859,327,885,884,428,883,101,13,
            880,389,494,27,829,605,464,399,313,739,146,363,267,903,242,945,410,914,127,767,270,986,960,839,609,98,360,27,569,688,425,990,6,599,410,141,874,485,903,172,594,711,91,973,56,745,341,131,353,346,52,92,362,667,103,877,466,760,950,248,323,487,151,385,123,134,174,534,570,489,300,828,271,672,394,598,811,999,34,553,361,64,826,131,97,339,95,545,488,477,194,608,942,446,273,619,235,772,60,939,550,782,234,485,628,803,281,804,642,176,342,160,927,
            976,542,215,368,69,26,7,593,885,592,189,925,657,692,768,283,391,851,903,933,759,495,513,237,786,100,403,687,14,365,83,893,958,684,404,987,486,853,842,232,829,165,917,69,179,684,787,197,682,868,310,721,25,877,884,383,978,111,549,758,885,155,40,833,134,927,774,22,242,587,296,137,711,868,555,145,777,805,65,527,984,933,780,943,335,770,132,925,920,103,176,525,194,764,137,734,900,691,217,196,540,314,923,696,864,282,268,519,862,827,422,340,367,386,142,2,926,808,860,538,902,80,879,6,
            857,404,115,864,221,860,322,529,424,173,479,394,701,634,587,744,783,234,566,696,706,429,951,535,513,188,95,804,865,12,679,853,261,559,234,891,595,735,116,747,947,463,914,361,120,265,476,867,151,861,701,623,717,29,491,2,493,530,618,967,830,481,883,296,122,80,409,123,723,504,540,684,745,310,414,275,55,73,451,642,443,42,54,790,43,235,63,543,293,398,833,725,487,27,935,921,62,885,534,765,306,57,893,57,789,76,801,955,212,297,613,810,414,356,799,679,242,533,694,345,630,892,431,923,426,
            629,607,364,946,704,99,771,482,977,787,581,548,599,621,789,13,434,101,182,197,70,482,816,117,983,196,628,379,23,433,214,177,307,880,838,28,
            775,709,651,464,505,946,101,969,393,590,381,428,395,855,595,972,189,372,252,768,899,757,14,537,869,836,449,306,794,868,379,608,116,487,104,105,879,806,365,577,495,442,23,607,789,576,621,150,709,200,751,823,744,62,41,148,969,465,272,967,85,682,415,305,340,79,30,951,871,852,624,743,885,115,576,400,798,522,847,951,259,707,69,142,23,298,666,783,390,559,975,270,953,731,869,932,811,599,417,704,628,567,67,368,879,358,394,437,889,796,159,380,1,810,802,1,814,749,20,118,394,193,906,106,97,
            973,474,844,981,716,486,582,266,604,74,383,641,615,795,633,107,991,230,353,739,511
            ,218,100,1,868,444,582,703,138,197,966,201,843,618,134,22,90,783,783,981,438,120,665,662,378,974,655,103,985,307,465,767,918,714,403,835,98,838,339,842,815,637,640,926,937,568,598,746,996,522,157,635,537,338,881,68,826,463,885,202,500,800,377,24,581,493,394,48,955};


    public static void main(String[] args) {


    }

   

    public static void maopao(int[] array){
        int temp;
        int len=array.length;
        for(int i=0;i<len;i++){
            for(int j=i+1;j<len;j++){
                if(array[i]>array[j]){
                    temp=array[i];
                    array[i]=array[j];
                    array[j]=temp;
                }
            }
        }

    }

}

```

2.文件读写

